Traceback (most recent call last):
  File "/Users/ulye_kak_raz/Desktop/pinn-course/.venv/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/ulye_kak_raz/Desktop/pinn-course/.venv/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/ulye_kak_raz/Desktop/pinn-course/.venv/lib/python3.10/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/ulye_kak_raz/Desktop/pinn-course/.venv/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/asyncio/base_events.py", line 646, in run_until_complete
    return future.result()
  File "/Users/ulye_kak_raz/Desktop/pinn-course/.venv/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/ulye_kak_raz/Desktop/pinn-course/.venv/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/ulye_kak_raz/Desktop/pinn-course/.venv/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Parameters
damping = 0.1
omega_n = 20

# Exact data generation, 500 linearly spaced t values
t_vals = torch.linspace(0, 1, 500).view(-1, 1)
u_exact = analytical_solution(damping, omega_n, t_vals)

# Select the every 20th element from the first 200 elements for training
t_train = t_vals[0:200:20]
u_train = u_exact[0:200:20]

# Plot the sampled points
plt.figure(figsize=(8, 4))
plt.plot(t_vals, u_exact, label="Exact", linestyle="-", color="steelblue", alpha=0.7)
plt.scatter(t_train, u_train, color="crimson", marker=".", label="Data Points")
plt.title("Sampled Data Points")
plt.xlabel("Time [t]")
plt.ylabel("Displacement [u]")
plt.legend()
plt.tight_layout()
plt.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mRuntimeError[0m                              Traceback (most recent call last)
Cell [0;32mIn[5], line 15[0m
[1;32m     13[0m [38;5;66;03m# Plot the sampled points[39;00m
[1;32m     14[0m plt[38;5;241m.[39mfigure(figsize[38;5;241m=[39m([38;5;241m8[39m, [38;5;241m4[39m))
[0;32m---> 15[0m [43mplt[49m[38;5;241;43m.[39;49m[43mplot[49m[43m([49m[43mt_vals[49m[43m,[49m[43m [49m[43mu_exact[49m[43m,[49m[43m [49m[43mlabel[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mExact[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mlinestyle[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43m-[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mcolor[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43msteelblue[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43malpha[49m[38;5;241;43m=[39;49m[38;5;241;43m0.7[39;49m[43m)[49m
[1;32m     16[0m plt[38;5;241m.[39mscatter(t_train, u_train, color[38;5;241m=[39m[38;5;124m"[39m[38;5;124mcrimson[39m[38;5;124m"[39m, marker[38;5;241m=[39m[38;5;124m"[39m[38;5;124m.[39m[38;5;124m"[39m, label[38;5;241m=[39m[38;5;124m"[39m[38;5;124mData Points[39m[38;5;124m"[39m)
[1;32m     17[0m plt[38;5;241m.[39mtitle([38;5;124m"[39m[38;5;124mSampled Data Points[39m[38;5;124m"[39m)

File [0;32m~/Desktop/pinn-course/.venv/lib/python3.10/site-packages/matplotlib/pyplot.py:3838[0m, in [0;36mplot[0;34m(scalex, scaley, data, *args, **kwargs)[0m
[1;32m   3830[0m [38;5;129m@_copy_docstring_and_deprecators[39m(Axes[38;5;241m.[39mplot)
[1;32m   3831[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21mplot[39m(
[1;32m   3832[0m     [38;5;241m*[39margs: [38;5;28mfloat[39m [38;5;241m|[39m ArrayLike [38;5;241m|[39m [38;5;28mstr[39m,
[0;32m   (...)[0m
[1;32m   3836[0m     [38;5;241m*[39m[38;5;241m*[39mkwargs,
[1;32m   3837[0m ) [38;5;241m-[39m[38;5;241m>[39m [38;5;28mlist[39m[Line2D]:
[0;32m-> 3838[0m     [38;5;28;01mreturn[39;00m [43mgca[49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43mplot[49m[43m([49m
[1;32m   3839[0m [43m        [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m
[1;32m   3840[0m [43m        [49m[43mscalex[49m[38;5;241;43m=[39;49m[43mscalex[49m[43m,[49m
[1;32m   3841[0m [43m        [49m[43mscaley[49m[38;5;241;43m=[39;49m[43mscaley[49m[43m,[49m
[1;32m   3842[0m [43m        [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43m([49m[43m{[49m[38;5;124;43m"[39;49m[38;5;124;43mdata[39;49m[38;5;124;43m"[39;49m[43m:[49m[43m [49m[43mdata[49m[43m}[49m[43m [49m[38;5;28;43;01mif[39;49;00m[43m [49m[43mdata[49m[43m [49m[38;5;129;43;01mis[39;49;00m[43m [49m[38;5;129;43;01mnot[39;49;00m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m [49m[38;5;28;43;01melse[39;49;00m[43m [49m[43m{[49m[43m}[49m[43m)[49m[43m,[49m
[1;32m   3843[0m [43m        [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m,[49m
[1;32m   3844[0m [43m    [49m[43m)[49m

File [0;32m~/Desktop/pinn-course/.venv/lib/python3.10/site-packages/matplotlib/axes/_axes.py:1777[0m, in [0;36mAxes.plot[0;34m(self, scalex, scaley, data, *args, **kwargs)[0m
[1;32m   1534[0m [38;5;250m[39m[38;5;124;03m"""[39;00m
[1;32m   1535[0m [38;5;124;03mPlot y versus x as lines and/or markers.[39;00m
[1;32m   1536[0m 
[0;32m   (...)[0m
[1;32m   1774[0m [38;5;124;03m(``'green'``) or hex strings (``'#008000'``).[39;00m
[1;32m   1775[0m [38;5;124;03m"""[39;00m
[1;32m   1776[0m kwargs [38;5;241m=[39m cbook[38;5;241m.[39mnormalize_kwargs(kwargs, mlines[38;5;241m.[39mLine2D)
[0;32m-> 1777[0m lines [38;5;241m=[39m [[38;5;241m*[39m[38;5;28mself[39m[38;5;241m.[39m_get_lines([38;5;28mself[39m, [38;5;241m*[39margs, data[38;5;241m=[39mdata, [38;5;241m*[39m[38;5;241m*[39mkwargs)]
[1;32m   1778[0m [38;5;28;01mfor[39;00m line [38;5;129;01min[39;00m lines:
[1;32m   1779[0m     [38;5;28mself[39m[38;5;241m.[39madd_line(line)

File [0;32m~/Desktop/pinn-course/.venv/lib/python3.10/site-packages/matplotlib/axes/_base.py:297[0m, in [0;36m_process_plot_var_args.__call__[0;34m(self, axes, data, return_kwargs, *args, **kwargs)[0m
[1;32m    295[0m     this [38;5;241m+[39m[38;5;241m=[39m args[[38;5;241m0[39m],
[1;32m    296[0m     args [38;5;241m=[39m args[[38;5;241m1[39m:]
[0;32m--> 297[0m [38;5;28;01myield from[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_plot_args[49m[43m([49m
[1;32m    298[0m [43m    [49m[43maxes[49m[43m,[49m[43m [49m[43mthis[49m[43m,[49m[43m [49m[43mkwargs[49m[43m,[49m[43m [49m[43mambiguous_fmt_datakey[49m[38;5;241;43m=[39;49m[43mambiguous_fmt_datakey[49m[43m,[49m
[1;32m    299[0m [43m    [49m[43mreturn_kwargs[49m[38;5;241;43m=[39;49m[43mreturn_kwargs[49m
[1;32m    300[0m [43m[49m[43m)[49m

File [0;32m~/Desktop/pinn-course/.venv/lib/python3.10/site-packages/matplotlib/axes/_base.py:483[0m, in [0;36m_process_plot_var_args._plot_args[0;34m(self, axes, tup, kwargs, return_kwargs, ambiguous_fmt_datakey)[0m
[1;32m    480[0m         kw[prop_name] [38;5;241m=[39m val
[1;32m    482[0m [38;5;28;01mif[39;00m [38;5;28mlen[39m(xy) [38;5;241m==[39m [38;5;241m2[39m:
[0;32m--> 483[0m     x [38;5;241m=[39m [43m_check_1d[49m[43m([49m[43mxy[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[43m)[49m
[1;32m    484[0m     y [38;5;241m=[39m _check_1d(xy[[38;5;241m1[39m])
[1;32m    485[0m [38;5;28;01melse[39;00m:

File [0;32m~/Desktop/pinn-course/.venv/lib/python3.10/site-packages/matplotlib/cbook.py:1361[0m, in [0;36m_check_1d[0;34m(x)[0m
[1;32m   1359[0m [38;5;250m[39m[38;5;124;03m"""Convert scalars to 1D arrays; pass-through arrays as is."""[39;00m
[1;32m   1360[0m [38;5;66;03m# Unpack in case of e.g. Pandas or xarray object[39;00m
[0;32m-> 1361[0m x [38;5;241m=[39m [43m_unpack_to_numpy[49m[43m([49m[43mx[49m[43m)[49m
[1;32m   1362[0m [38;5;66;03m# plot requires `shape` and `ndim`.  If passed an[39;00m
[1;32m   1363[0m [38;5;66;03m# object that doesn't provide them, then force to numpy array.[39;00m
[1;32m   1364[0m [38;5;66;03m# Note this will strip unit information.[39;00m
[1;32m   1365[0m [38;5;28;01mif[39;00m ([38;5;129;01mnot[39;00m [38;5;28mhasattr[39m(x, [38;5;124m'[39m[38;5;124mshape[39m[38;5;124m'[39m) [38;5;129;01mor[39;00m
[1;32m   1366[0m         [38;5;129;01mnot[39;00m [38;5;28mhasattr[39m(x, [38;5;124m'[39m[38;5;124mndim[39m[38;5;124m'[39m) [38;5;129;01mor[39;00m
[1;32m   1367[0m         [38;5;28mlen[39m(x[38;5;241m.[39mshape) [38;5;241m<[39m [38;5;241m1[39m):

File [0;32m~/Desktop/pinn-course/.venv/lib/python3.10/site-packages/matplotlib/cbook.py:2387[0m, in [0;36m_unpack_to_numpy[0;34m(x)[0m
[1;32m   2381[0m         [38;5;28;01mreturn[39;00m xtmp
[1;32m   2382[0m [38;5;28;01mif[39;00m _is_torch_array(x) [38;5;129;01mor[39;00m _is_jax_array(x) [38;5;129;01mor[39;00m _is_tensorflow_array(x):
[1;32m   2383[0m     [38;5;66;03m# using np.asarray() instead of explicitly __array__(), as the latter is[39;00m
[1;32m   2384[0m     [38;5;66;03m# only _one_ of many methods, and it's the last resort, see also[39;00m
[1;32m   2385[0m     [38;5;66;03m# https://numpy.org/devdocs/user/basics.interoperability.html#using-arbitrary-objects-in-numpy[39;00m
[1;32m   2386[0m     [38;5;66;03m# therefore, let arrays do better if they can[39;00m
[0;32m-> 2387[0m     xtmp [38;5;241m=[39m [43mnp[49m[38;5;241;43m.[39;49m[43masarray[49m[43m([49m[43mx[49m[43m)[49m
[1;32m   2389[0m     [38;5;66;03m# In case np.asarray method does not return a numpy array in future[39;00m
[1;32m   2390[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(xtmp, np[38;5;241m.[39mndarray):

File [0;32m~/Desktop/pinn-course/.venv/lib/python3.10/site-packages/torch/_tensor.py:1062[0m, in [0;36mTensor.__array__[0;34m(self, dtype)[0m
[1;32m   1060[0m     [38;5;28;01mreturn[39;00m handle_torch_function(Tensor[38;5;241m.[39m__array__, ([38;5;28mself[39m,), [38;5;28mself[39m, dtype[38;5;241m=[39mdtype)
[1;32m   1061[0m [38;5;28;01mif[39;00m dtype [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[0;32m-> 1062[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mnumpy[49m[43m([49m[43m)[49m
[1;32m   1063[0m [38;5;28;01melse[39;00m:
[1;32m   1064[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mnumpy()[38;5;241m.[39mastype(dtype, copy[38;5;241m=[39m[38;5;28;01mFalse[39;00m)

[0;31mRuntimeError[0m: Numpy is not available

